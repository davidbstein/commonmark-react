// Generated by CoffeeScript 1.7.1
(function() {
  var dependencies, _, _v,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  dependencies = {
    React: "react",
    commonmark: "commonmark",
    $: "jquery"
  };

  define((function() {
    var _results;
    _results = [];
    for (_ in dependencies) {
      _v = dependencies[_];
      _results.push(_v);
    }
    return _results;
  })(), function() {
    var AtomicTypes, CommonmarkElement, NodeTree, SimpleTagToElem, TagTypes, d, _i, _k, _parser;
    _i = 0;
    for (_k in dependencies) {
      this[_k] = arguments[_i++];
    }
    d = React.DOM;
    _parser = commonmark.Parser();
    TagTypes = {
      BLOCKQUOTE: 'BlockQuote',
      CODE: 'Code',
      CODEBLOCK: 'CodeBlock',
      DOCUMENT: 'Document',
      EMPH: 'Emph',
      HARDBREAK: 'Hardbreak',
      HEADER: 'Header',
      HORIZONTALRULE: 'HorizontalRule',
      HTML: 'Html',
      HTMLBLOCK: 'HtmlBlock',
      IMAGE: 'Image',
      ITEM: 'Item',
      LINK: 'Link',
      LIST: 'List',
      PARAGRAPH: 'Paragraph',
      SOFTBREAK: 'Softbreak',
      STRONG: 'Strong',
      TEXT: 'Text'
    };
    AtomicTypes = [TagTypes.CODE, TagTypes.CODEBLOCK, TagTypes.HARDBREAK, TagTypes.HORIZONTALRULE, TagTypes.HTML, TagTypes.HTMLBLOCK, TagTypes.HTMLBLOCK, TagTypes.IMAGE, TagTypes.SOFTBREAK, TagTypes.TEXT];
    SimpleTagToElem = {
      Emph: "em",
      Strong: "strong",
      Document: "div",
      Paragraph: "p",
      Blockquote: "blockquote",
      Item: "li"
    };
    NodeTree = (function() {
      function NodeTree(raw) {
        var root, walker;
        root = _parser.parse(raw);
        walker = root.walker();
        this.tree = {
          node: root,
          children: []
        };
        this._build_tree(walker, this.tree, null);
        this.toc_elements = [];
        this.headings = [];
        this.react_element = this._render_react(this.tree, []);
      }

      NodeTree.prototype.get_react_element = function() {
        return this.react_element;
      };

      NodeTree.prototype.get_toc_element = function() {
        var section_id, title;
        return d.div({
          className: "cm-table-of-contents"
        }, (function() {
          var _j, _len, _ref, _ref1, _results;
          _ref = this.toc_elements;
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            _ref1 = _ref[_j], section_id = _ref1[0], title = _ref1[1];
            _results.push(d.div({
              className: "cm-toc-item"
            }, d.a({
              href: "#section-" + section_id
            }, d.div({
              className: "cm-toc-item-section-id"
            }, section_id), d.div({
              className: "cm-toc-item-section-title"
            }, title))));
          }
          return _results;
        }).call(this));
      };

      NodeTree.prototype._build_tree = function(walker, cur_node, parent, depth) {
        var current, entering, new_node, node, _ref;
        if (depth == null) {
          depth = 0;
        }
        while (current = walker.next()) {
          if (typeof current === "undefined" || current === null) {
            return;
          }
          entering = current.entering, node = current.node;
          if (entering) {
            new_node = {
              node: node,
              children: [],
              type: node.type
            };
            cur_node.children.push(new_node);
            if (_ref = node.type, __indexOf.call(AtomicTypes, _ref) < 0) {
              this._build_tree(walker, new_node, cur_node, depth + 1);
            }
          } else {
            return;
          }
        }
      };

      NodeTree.prototype._render_children = function(children) {
        var node, _j, _len, _results;
        _results = [];
        for (_j = 0, _len = children.length; _j < _len; _j++) {
          node = children[_j];
          _results.push(this._render_react(node));
        }
        return _results;
      };

      NodeTree.prototype._get_text_from_nodes = function(nodes) {
        var n;
        return ((function() {
          var _j, _len, _results;
          _results = [];
          for (_j = 0, _len = nodes.length; _j < _len; _j++) {
            n = nodes[_j];
            _results.push(n.node.literal);
          }
          return _results;
        })()).join(" ");
      };

      NodeTree.prototype._render_react = function(tree_node) {
        var children, content, elementClass, info_words, language, node, options, raw_text, section_id, tag, tagname, _base, _name, _ref, _ref1, _ref2;
        options = {
          safe: false
        };
        node = tree_node.node, children = tree_node.children;
        if (node.type === TagTypes.SOFTBREAK) {
          return d.span({
            className: "cm-react-softbreak"
          }, "\n");
        } else if (node.type === TagTypes.HARDBREAK) {
          return d.br({
            className: "cm-react-hardbreak"
          });
        } else if (node.type === TagTypes.HORIZONTALRULE) {
          return d.hr({
            className: "cm-horizontal-rule"
          });
        } else if (node.type === TagTypes.TEXT) {
          return d.span({
            className: "cm-react-text"
          }, node.literal);
        } else if (node.type === TagTypes.CODE) {
          return d.code({
            className: "cm-react-code"
          }, node.literal);
        } else if ((_ref = node.type) === TagTypes.HTML || _ref === TagTypes.HTMLBLOCK) {
          return d.div({
            className: "cm-react-html",
            dangerouslySetInnerHTML: {
              __html: node.literal
            }
          });
        } else if (node.type === TagTypes.CODEBLOCK) {
          info_words = node.info ? node.info.split(/\s+/) : [];
          language = "code";
          if (info_words.length > 0 && info_words[0].length > 0) {
            language = info_words[0];
          }
          return d.pre({
            className: "cm-react-codeblock-wrapper"
          }, d.code({
            className: "cm-react-codeblock"
          }, node.literal));
        } else if ((tag = SimpleTagToElem[node.type]) != null) {
          tag = SimpleTagToElem[node.type];
          return d[tag]({
            className: "cm-react-" + tag
          }, this._render_children(children));
        } else if (node.type === TagTypes.HEADER) {
          tagname = 'h' + node.level;
          content = this._render_children(children);
          raw_text = this._get_text_from_nodes(children);
          section_id = void 0;
          if ((1 < (_ref1 = node.level) && _ref1 < 4)) {
            if ((_base = this.headings)[_name = node.level - 2] == null) {
              _base[_name] = 0;
            }
            this.headings[node.level - 2]++;
            this.headings = this.headings.slice(0, node.level - 1);
            section_id = this.headings.join('.');
            this.toc_elements.push([section_id, raw_text]);
          }
          return d[tagname]({
            className: "cm-react-header"
          }, section_id ? d.a({
            name: "section-" + section_id,
            className: "cm-section-id"
          }, "" + section_id) : void 0, content);
        } else if (node.type === TagTypes.BLOCKQUOTE) {
          return d.blockquote({
            className: "cm-react-blockquote"
          }, this._render_children(children));
        } else if (node.type === TagTypes.LINK) {
          return d.a({
            className: "cm-react-link",
            href: node.destination,
            title: node.title,
            target: ((_ref2 = node.destination) != null ? _ref2.substr(0, 1) : void 0) !== "#" ? "_blank" : void 0
          }, this._render_children(children));
        } else if (node.type === TagTypes.IMAGE) {
          return d.img({
            className: "cm-react-image",
            src: node.destination,
            title: node.title
          });
        } else if (node.type === TagTypes.LIST) {
          elementClass = node.listType === 'Bullet' ? d.ul : d.ol;
          return elementClass({
            className: "cm-react-list"
          }, this._render_children(children));
        } else {
          throw 'Unknown node type ' + node.type;
        }
      };

      return NodeTree;

    })();
    return CommonmarkElement = React.createFactory(React.createClass({
      displayName: "CommonmarkElement",
      propTypes: {
        raw: React.PropTypes.string.isRequired
      },
      getInitialState: function() {
        return {};
      },
      render: function() {
        var node_tree;
        node_tree = new NodeTree(this.props.raw);
        return d.div({}, this.props.showTableOfContents ? node_tree.get_toc_element() : void 0, node_tree.get_react_element());
      }
    }));
  });

}).call(this);
